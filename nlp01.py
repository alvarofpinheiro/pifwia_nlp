# -*- coding: utf-8 -*-
"""nlp01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkQ7ITfndfkeXBnHY-AeMStRS5J7wUlE

NLP
"""

import nltk
import re
from nltk.corpus import wordnet

"""** Operações com Python **"""

frase = 'Python eh uma linguagem fenomenal'; frase

frase2 = ' para qualquer cientista de dados'

frase + frase2

['Segunda','Terça','Quarta'] + ['Quinta','Sexta','Sábado']

lista = ['Segunda','Terça','Quarta']
lista.append('Quinta-feira')
lista

frase2[0:15]

lista[3:8]

"""**Objeto String**"""

len(lista)

frase2='Six six six the number of the Beast'
frase2 = frase2.lower()
frase2.count('six')

len(frase2)

"""** Varrer Strings**"""

frase2.index('cientista')

frase2[14:35]

"""**Join**"""

lista = ['hot','dog']
' '.join(lista)

"""** Expressões regulares**"""

texto = 'O numero da nossa casa 56, apto 306'
re.sub('[-|0-9]',' ', texto)

texto = "i'm back baby!!!, Data Science ??;;;()"
re.sub(r'[-./?!,":;()\']',' ',texto)

"""**Trabalhando com a NLTK **"""

!pip install nltk

"""**Faça o download da base de dados do NLTK**

* Abra o terminal
* Abra o console Python
* importe a biblioteca **NLTK**
* execute o comando **nltk.download()**
"""

frase = 'Python eh uma linguagem fenomenal'
palavras = nltk.word_tokenize(frase)
palavras

from nltk import FreqDist
frequencia = FreqDist(['six','six','six','Iron Maiden','the','Best','Iron Maiden','forever'])
frequencia

print (frequencia.values())

frequencia.max()

frequencia.items()

"""**Plota a Frequencia das palavras na Frase**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
import numpy as np
import matplotlib.pyplot as plt

palavras = frequencia.keys()
y_pos = np.arange(len(palavras))
contagem = frequencia.values()

plt.bar(y_pos, contagem, align='center', alpha=0.5)
plt.xticks(y_pos, palavras)
plt.ylabel('Frequencia')
plt.title('Frequencia das palavras na frase')

plt.show()

"""**Pre Processing**

# Stemming

* Reduz a palavra na sua forma radical
* Usado para fazer pré-processamento de dados
"""

# Stemming em Portugues
stemmer = nltk.stem.RSLPStemmer()

stemmer.stem('Trabalhou')

stemmer.stem('Trabalhava')

stemmer.stem('Trabalha')

stemmer.stem('Carro')

stemmer.stem('correu')

stemmer.stem('corrida')

#Stemming em Ingles
stemmer = nltk.stem.SnowballStemmer("english")

stemmer.stem('running')

stemmer.stem('run')

stemmer.stem('have')

stemmer.stem('having')

"""** Função para aplicar Stemming**"""

def Stemming(instancia):
    stemmer = nltk.stem.RSLPStemmer()
    palavras=[]
    for w in instancia.split():
        palavras.append(stemmer.stem(w))
    return (" ".join(palavras))

Stemming('Ele trabalhava frequentemente no projeto de criacao de novos produtos')

"""# Lemmatization

* Desflexiona uma palavra para determinar o seu 'Lemma'
* Técnica usada para fazer pré-processamento de dados.
"""

from nltk.stem import WordNetLemmatizer

lemmatizer = WordNetLemmatizer()

print (lemmatizer.lemmatize("cats"))

# Busca um lemma para 'is' do tipo verbo
lemmatizer.lemmatize('is', pos='v')

lemmatizer.lemmatize('are', pos='v')

# Busca um adjetivo para 'better'
print (lemmatizer.lemmatize("better", pos="a"))

print (lemmatizer.lemmatize("best", pos="a"))

print (lemmatizer.lemmatize("running", pos="n"))

print (lemmatizer.lemmatize("running", pos="v"))

print (lemmatizer.lemmatize("running", pos="a"))

"""# ** Stopwords**

* Palavras ou termos que são muito usadas mas normalmente não tem nenhum significado como artigos: 'é','o','a'
* Técnica usada para pré-processamento de dados
"""

stopwords = nltk.corpus.stopwords.words('portuguese')

stopwords

def RemoviStopWords(instancia):
    instancia = instancia.lower()
    stopwords = set(nltk.corpus.stopwords.words('portuguese'))
    palavras = [i for i in instancia.split() if not i in stopwords]
    return (" ".join(palavras))

sentenca1 = 'Ola mundo, estou trabalhando com textos com o artigo do minerando dados'

RemoviStopWords(sentenca1)

sentenca2 = 'Seu trabalho de NLP será super interessante com as aulas de Mineração de Textos'

RemoviStopWords(sentenca2)

"""**Importante**: Use com moderação e sempre teste os resultados.

# ** Part of Speech**

* Part of Speech: Na tardução literal seria: *Partes da Fala*.
* Consistem em identificar a **função gramatical** das palavras em um texto.
* A função gramatical muda conforme é empregada a palavra no texto.
"""

text = nltk.word_tokenize('O blog Minerando Dados é muito bom')
nltk.pos_tag(text)

text = nltk.word_tokenize('João Comprou um presente muito legal')
nltk.pos_tag(text)

nltk.help.upenn_tagset('NNP')

nltk.help.upenn_tagset('JJ')

nltk.help.upenn_tagset('N')

nltk.help.upenn_tagset('VB')

text = nltk.word_tokenize("My print is very good")
nltk.pos_tag(text)

nltk.help.upenn_tagset('DT')

text = nltk.word_tokenize("Hi, my name is Rodrigo, I want to print the outstanding invoice")
nltk.pos_tag(text)

"""* Part of Speech é uma técnica dificil devido as funções gramaticais de cada idioma.
* Existem projetos que utilizam Machine Learning para implementar POS.

# Trabalhando com Wordnet

* O Wordnet é um grande banco de dados léxico de substantivos, verbos, adjetivos e advérbios.
* Essas palavras são agrupadas em conjuntos de sinônimos, cada um expressando um **conceito distinto**.
* Os sinônimos são interligados pelo seu significado semântico conceitual e suas relações léxicas.
* O Wordnet é uma grande rede de **conceitos interligados** e é amplamente utilizada em pesquisas no mundo todo.
* O NLTK contém uma interface de acesso ao Wordnet.

**Obs:** 
* Existem diversas variações do Wordnet para outros idiomas. 
* Para português ainda existem poucas iniciativas

**Consulta um sinônimo para a palavra '*bike*' **
"""

from nltk.corpus import wordnet
wordnet.synsets('bike')

"""**Definicoes da palavra 'bike'**

"""

wordnet.synset('bicycle.n.01').definition()

# " veículo de rodas que tem duas rodas e é movido por pedais"

wordnet.synset('motorcycle.n.01').definition()

# " veículo a motor com duas rodas e um quadro forte"

"""**Consulta hierarquia de termos**"""

# Hiponimos da palavra 'bicycle'.
# Conceitos mais especificos.
wordnet.synset('bicycle.n.01').hyponyms()

# Hiperonimos da palavra 'bicycle'
# Conceitos mais genericos
wordnet.synset('bicycle.n.01').hypernyms()

# Meronyms da palavra 'bicycle'
# Conceitos partes de outros conceitos
wordnet.synset('bicycle.n.01').part_meronyms()